#include <iostream>
#include <vector>

using namespace std;

// Попереднє визначення класів
class Shape;
class Circle;
class Square;

// Інтерфейс, який дозволяє розширювати функціональність без зміни існуючого коду
class ShapeVisitor {
public:
    virtual void visit(Circle &circle) = 0;
    virtual void visit(Square &square) = 0;
};

// Абстрактний клас Форми
class Shape {
public:
    virtual ~Shape() {}
    virtual void accept(ShapeVisitor &visitor) = 0;
};

// Конкретна форма: Коло
class Circle : public Shape {
public:
    void accept(ShapeVisitor &visitor) override {
        visitor.visit(*this);
    }

    void draw() const {
        cout << "Це коло." << endl;
        // Код для візуалізації кола
    }
};

// Конкретна форма: Квадрат
class Square : public Shape {
public:
    void accept(ShapeVisitor &visitor) override {
        visitor.visit(*this);
    }

    void draw() const {
        cout << "Це квадрат." << endl;
        // Код для візуалізації квадрата
    }
};

// Конкретний візитор, який реалізує операції над формами
class ShapeDrawingVisitor : public ShapeVisitor {
public:
    void visit(Circle &circle) override {
        circle.draw();
    }

    void visit(Square &square) override {
        square.draw();
    }
};

int main() {
    vector<Shape*> shapes = {new Circle(), new Square()};
    ShapeDrawingVisitor drawingVisitor;

    for (Shape *shape : shapes) {
        shape->accept(drawingVisitor);
    }

    // Очищення пам'яті
    for (Shape *shape : shapes) {
        delete shape;
    }

    return 0;
}
